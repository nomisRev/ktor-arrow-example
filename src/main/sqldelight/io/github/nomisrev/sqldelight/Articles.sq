import io.github.nomisrev.repo.ArticleId;
import io.github.nomisrev.repo.UserId;
import java.time.OffsetDateTime;

CREATE TABLE IF NOT EXISTS articles(
    id BIGSERIAL AS ArticleId PRIMARY KEY,
    slug VARCHAR(255) UNIQUE NOT NULL,
    title VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    body TEXT NOT NULL,
    author_id BIGINT AS UserId REFERENCES users(id) ON DELETE CASCADE NOT NULL,
    createdAt VARCHAR(50) AS OffsetDateTime NOT NULL,
    updatedAt VARCHAR(50) AS OffsetDateTime NOT NULL
);

amountOfArticleForAuthor:
SELECT COUNT(id)
FROM articles
WHERE author_id = :authorId;

selectArticlesOfAuthor:
SELECT id, slug, title, description, body, author_id, createdAt, updatedAt
FROM articles
WHERE author_id = :authorId
ORDER BY createdAt DESC
LIMIT :limit OFFSET :offset;

selectFeedArticles:
SELECT
articles.id AS article__id, articles.slug AS article__slug, articles.title AS article__title, articles.description AS article__description, articles.body AS article__body, articles.author_id AS article__author_id, articles.createdAt AS article__createdAt, articles.updatedAt AS article__updatedAt,
users.id AS users__id, users.username AS users__username, users.image AS users__image
FROM articles
INNER JOIN users ON articles.author_id = users.id
WHERE articles.author_id IN (
    SELECT following.followed_id
    FROM following
    WHERE following.follower_id = :user_id
)
ORDER BY createdAt DESC
LIMIT :limit OFFSET :offset;

update:
UPDATE articles
SET title = COALESCE(:title, title), 
    description = COALESCE(:description, description), 
    body = COALESCE(:body, body),
    updatedAt = :updatedAt
WHERE slug = :slug
RETURNING id, slug, title, description, body, author_id, createdAt, updatedAt;

insertAndGetId:
INSERT INTO articles(slug, title, description, body, author_id, createdAt, updatedAt)
VALUES (:slug, :title, :description, :body, :authorId, :createdAt, :updatedAt)
RETURNING id;

selectBySlug:
SELECT id, slug, title, description, body, author_id, createdAt, updatedAt
FROM articles
WHERE slug = :slug;

slugExists:
SELECT EXISTS(
  SELECT 1
  FROM articles
  WHERE slug= :slug
  LIMIT 1
);

delete:
DELETE FROM articles
WHERE id = :articleId;
